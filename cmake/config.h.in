/* config.h.in - Cross-platform configuration header template for UniConv/iconv
 * Generated by CMake from config.h.in template
 * Supports both Windows (MSVC/MinGW) and Unix-like systems (Linux/macOS)
 */

#ifndef CONFIG_H
#define CONFIG_H

/* Package information */
#cmakedefine PACKAGE_NAME "@PACKAGE_NAME@"
#cmakedefine PACKAGE_VERSION "@PACKAGE_VERSION@"
#cmakedefine PACKAGE_STRING "@PACKAGE_STRING@"
#cmakedefine PACKAGE_BUGREPORT "@PACKAGE_BUGREPORT@"
#cmakedefine PACKAGE_URL "@PACKAGE_URL@"
#cmakedefine PACKAGE_TARNAME "@PACKAGE_TARNAME@"
#cmakedefine PACKAGE "@PACKAGE@"
#cmakedefine VERSION "@VERSION@"

/* Build configuration */
#cmakedefine ENABLE_EXTRA @ENABLE_EXTRA@
#cmakedefine ENABLE_NLS @ENABLE_NLS@
#cmakedefine ENABLE_RELOCATABLE @ENABLE_RELOCATABLE@
#cmakedefine AC_APPLE_UNIVERSAL_BUILD @AC_APPLE_UNIVERSAL_BUILD@

/* Platform detection */
#cmakedefine WINDOWS_NATIVE @WINDOWS_NATIVE@
#if defined(_WIN32) || defined(_WIN64) || defined(__CYGWIN__) || defined(__MINGW32__) || defined(__MINGW64__)
# ifndef WINDOWS_NATIVE
#  define WINDOWS_NATIVE 1
# endif
#endif

/* Standard headers availability */
#cmakedefine HAVE_STDINT_H @HAVE_STDINT_H@
#cmakedefine HAVE_INTTYPES_H @HAVE_INTTYPES_H@
#cmakedefine HAVE_STDIO_H @HAVE_STDIO_H@
#cmakedefine HAVE_STDLIB_H @HAVE_STDLIB_H@
#cmakedefine HAVE_STRING_H @HAVE_STRING_H@
#cmakedefine HAVE_STRINGS_H @HAVE_STRINGS_H@
#cmakedefine HAVE_UNISTD_H @HAVE_UNISTD_H@
#cmakedefine HAVE_LIMITS_H @HAVE_LIMITS_H@
#cmakedefine HAVE_WCHAR_H @HAVE_WCHAR_H@
#cmakedefine HAVE_SYS_STAT_H @HAVE_SYS_STAT_H@
#cmakedefine HAVE_SYS_TYPES_H @HAVE_SYS_TYPES_H@
#cmakedefine HAVE_MINIX_CONFIG_H @HAVE_MINIX_CONFIG_H@

/* Windows-specific headers */
#ifdef WINDOWS_NATIVE
# define HAVE_WINDOWS_H 1
# define HAVE_IO_H 1
# define HAVE_PROCESS_H 1
# define HAVE_DIRECT_H 1
# ifndef HAVE_UNISTD_H
#  define HAVE_UNISTD_H 0
# endif
#endif

/* Type availability and sizes */
#cmakedefine HAVE_WCHAR_T @HAVE_WCHAR_T@
#cmakedefine HAVE_WINT_T @HAVE_WINT_T@
#cmakedefine HAVE_MBSTATE_T @HAVE_MBSTATE_T@

/* Type size definitions */
#cmakedefine BITSIZEOF_PTRDIFF_T @BITSIZEOF_PTRDIFF_T@
#cmakedefine BITSIZEOF_SIG_ATOMIC_T @BITSIZEOF_SIG_ATOMIC_T@
#cmakedefine BITSIZEOF_SIZE_T @BITSIZEOF_SIZE_T@
#cmakedefine BITSIZEOF_WCHAR_T @BITSIZEOF_WCHAR_T@
#cmakedefine BITSIZEOF_WINT_T @BITSIZEOF_WINT_T@

/* Standard C library functions */
#cmakedefine HAVE_MEMMOVE @HAVE_MEMMOVE@
#cmakedefine HAVE_SETLOCALE @HAVE_SETLOCALE@
#cmakedefine HAVE_MBRTOWC @HAVE_MBRTOWC@
#cmakedefine HAVE_WCRTOMB @HAVE_WCRTOMB@
#cmakedefine HAVE_MBSINIT @HAVE_MBSINIT@
#cmakedefine HAVE_GETC_UNLOCKED @HAVE_GETC_UNLOCKED@

/* Build system features */
#cmakedefine C_ALLOCA @C_ALLOCA@
#cmakedefine DOUBLE_SLASH_IS_DISTINCT_ROOT @DOUBLE_SLASH_IS_DISTINCT_ROOT@

/* Thread-safe functions (mainly Unix) */
#cmakedefine HAVE_DECL_CLEARERR_UNLOCKED @HAVE_DECL_CLEARERR_UNLOCKED@
#cmakedefine HAVE_DECL_FEOF_UNLOCKED @HAVE_DECL_FEOF_UNLOCKED@
#cmakedefine HAVE_DECL_FERROR_UNLOCKED @HAVE_DECL_FERROR_UNLOCKED@
#cmakedefine HAVE_DECL_FFLUSH_UNLOCKED @HAVE_DECL_FFLUSH_UNLOCKED@
#cmakedefine HAVE_DECL_FGETS_UNLOCKED @HAVE_DECL_FGETS_UNLOCKED@
#cmakedefine HAVE_DECL_FPUTC_UNLOCKED @HAVE_DECL_FPUTC_UNLOCKED@
#cmakedefine HAVE_DECL_FPUTS_UNLOCKED @HAVE_DECL_FPUTS_UNLOCKED@
#cmakedefine HAVE_DECL_FREAD_UNLOCKED @HAVE_DECL_FREAD_UNLOCKED@
#cmakedefine HAVE_DECL_FWRITE_UNLOCKED @HAVE_DECL_FWRITE_UNLOCKED@
#cmakedefine HAVE_DECL_GETCHAR_UNLOCKED @HAVE_DECL_GETCHAR_UNLOCKED@
#cmakedefine HAVE_DECL_GETC_UNLOCKED @HAVE_DECL_GETC_UNLOCKED@
#cmakedefine HAVE_DECL_PUTCHAR_UNLOCKED @HAVE_DECL_PUTCHAR_UNLOCKED@
#cmakedefine HAVE_DECL_PUTC_UNLOCKED @HAVE_DECL_PUTC_UNLOCKED@

/* Locale and internationalization support */
#cmakedefine HAVE_LANGINFO_CODESET @HAVE_LANGINFO_CODESET@
#cmakedefine HAVE_GETTEXT @HAVE_GETTEXT@

/* Memory allocation behavior */
#cmakedefine HAVE_MALLOC_POSIX @HAVE_MALLOC_POSIX@
#cmakedefine HAVE_FREE_POSIX @HAVE_FREE_POSIX@

/* iconv-specific configuration */
#cmakedefine HAVE_ICONV @HAVE_ICONV@
#cmakedefine ICONV_CONST @ICONV_CONST@

/* If ICONV_CONST is not defined, provide a default */
#ifndef ICONV_CONST
# ifdef WINDOWS_NATIVE
#  define ICONV_CONST
# else
#  define ICONV_CONST const
# endif
#endif

/* Compiler and toolchain features */
#cmakedefine HAVE_VISIBILITY @HAVE_VISIBILITY@

/* EILSEQ error code handling */
#ifdef WINDOWS_NATIVE
# ifndef EILSEQ
#  define EILSEQ 42  /* Common fallback value for Windows */
# endif
#else
# cmakedefine EILSEQ @EILSEQ@
#endif

/* Standard C compatibility */
#cmakedefine STDC_HEADERS @STDC_HEADERS@

/* Byte order detection */
#cmakedefine WORDS_BIGENDIAN @WORDS_BIGENDIAN@

#if defined AC_APPLE_UNIVERSAL_BUILD
# if defined __BIG_ENDIAN__
#  define WORDS_BIGENDIAN 1
# endif
#else
# ifndef WORDS_BIGENDIAN
#  cmakedefine WORDS_BIGENDIAN @WORDS_BIGENDIAN@
# endif
#endif

/* Build directory information */
#cmakedefine LT_OBJDIR "@LT_OBJDIR@"
#cmakedefine LIBDIR "@LIBDIR@"
#cmakedefine INSTALLDIR "@INSTALLDIR@"

/* Platform-specific feature extensions */

/* Enable extensions on AIX 3, Interix.  */
#ifndef _ALL_SOURCE
# cmakedefine _ALL_SOURCE @_ALL_SOURCE@
#endif

/* Enable general extensions on macOS.  */
#ifndef _DARWIN_C_SOURCE
# cmakedefine _DARWIN_C_SOURCE @_DARWIN_C_SOURCE@
#endif

/* Enable general extensions on Solaris.  */
#ifndef __EXTENSIONS__
# cmakedefine __EXTENSIONS__ @__EXTENSIONS__@
#endif

/* Enable GNU extensions on systems that have them.  */
#ifndef _GNU_SOURCE
# cmakedefine _GNU_SOURCE @_GNU_SOURCE@
#endif

/* Identify the host operating system as Minix.  */
#ifndef _MINIX
# cmakedefine _MINIX @_MINIX@
#endif

/* Enable general extensions on NetBSD.  */
#ifndef _NETBSD_SOURCE
# cmakedefine _NETBSD_SOURCE @_NETBSD_SOURCE@
#endif

/* Enable OpenBSD compatibility extensions on NetBSD.  */
#ifndef _OPENBSD_SOURCE
# cmakedefine _OPENBSD_SOURCE @_OPENBSD_SOURCE@
#endif

/* Define to 1 if needed for POSIX-compatible behavior.  */
#ifndef _POSIX_SOURCE
# cmakedefine _POSIX_SOURCE @_POSIX_SOURCE@
#endif

/* Define to 2 if needed for POSIX-compatible behavior.  */
#ifndef _POSIX_1_SOURCE
# cmakedefine _POSIX_1_SOURCE @_POSIX_1_SOURCE@
#endif

/* Enable POSIX-compatible threading on Solaris.  */
#ifndef _POSIX_PTHREAD_SEMANTICS
# cmakedefine _POSIX_PTHREAD_SEMANTICS @_POSIX_PTHREAD_SEMANTICS@
#endif

/* Enable extensions specified by ISO/IEC TS 18661-5:2014.  */
#ifndef __STDC_WANT_IEC_60559_ATTRIBS_EXT__
# cmakedefine __STDC_WANT_IEC_60559_ATTRIBS_EXT__ @__STDC_WANT_IEC_60559_ATTRIBS_EXT__@
#endif

/* Enable extensions specified by ISO/IEC TS 18661-1:2014.  */
#ifndef __STDC_WANT_IEC_60559_BFP_EXT__
# cmakedefine __STDC_WANT_IEC_60559_BFP_EXT__ @__STDC_WANT_IEC_60559_BFP_EXT__@
#endif

/* Enable extensions specified by ISO/IEC TS 18661-2:2015.  */
#ifndef __STDC_WANT_IEC_60559_DFP_EXT__
# cmakedefine __STDC_WANT_IEC_60559_DFP_EXT__ @__STDC_WANT_IEC_60559_DFP_EXT__@
#endif

/* Enable extensions specified by ISO/IEC TS 18661-4:2015.  */
#ifndef __STDC_WANT_IEC_60559_FUNCS_EXT__
# cmakedefine __STDC_WANT_IEC_60559_FUNCS_EXT__ @__STDC_WANT_IEC_60559_FUNCS_EXT__@
#endif

/* Enable extensions specified by ISO/IEC TS 18661-3:2015.  */
#ifndef __STDC_WANT_IEC_60559_TYPES_EXT__
# cmakedefine __STDC_WANT_IEC_60559_TYPES_EXT__ @__STDC_WANT_IEC_60559_TYPES_EXT__@
#endif

/* Enable extensions specified by ISO/IEC TR 24731-2:2010.  */
#ifndef __STDC_WANT_LIB_EXT2__
# cmakedefine __STDC_WANT_LIB_EXT2__ @__STDC_WANT_LIB_EXT2__@
#endif

/* Enable extensions specified by ISO/IEC 24747:2009.  */
#ifndef __STDC_WANT_MATH_SPEC_FUNCS__
# cmakedefine __STDC_WANT_MATH_SPEC_FUNCS__ @__STDC_WANT_MATH_SPEC_FUNCS__@
#endif

/* Enable extensions on HP NonStop.  */
#ifndef _TANDEM_SOURCE
# cmakedefine _TANDEM_SOURCE @_TANDEM_SOURCE@
#endif

/* Enable X/Open extensions. Define to 500 only if necessary to make mbstate_t available. */
#ifndef _XOPEN_SOURCE
# cmakedefine _XOPEN_SOURCE @_XOPEN_SOURCE@
#endif

/* Windows-specific type definitions and compatibility */
#ifdef WINDOWS_NATIVE

/* Windows standard integer types are available through stdint.h in modern versions */
# if defined(_MSC_VER) && (_MSC_VER >= 1600) || defined(__MINGW32__) || defined(__MINGW64__)
#  define HAVE_STDINT_H 1
#  define HAVE_INTTYPES_H 1
# endif

/* Define missing POSIX types for Windows */
# ifndef HAVE_SSIZE_T
#  ifdef _WIN64
    typedef __int64 ssize_t;
#  else
    typedef int ssize_t;
#  endif
#  define HAVE_SSIZE_T 1
# endif

# ifndef HAVE_MODE_T
   typedef unsigned short mode_t;
#  define HAVE_MODE_T 1
# endif

# ifndef HAVE_UID_T
   typedef unsigned int uid_t;
#  define HAVE_UID_T 1
# endif

# ifndef HAVE_GID_T
   typedef unsigned int gid_t;
#  define HAVE_GID_T 1
# endif

# ifndef HAVE_PID_T
   typedef int pid_t;
#  define HAVE_PID_T 1
# endif

# ifndef HAVE_NLINK_T
   typedef unsigned short nlink_t;
#  define HAVE_NLINK_T 1
# endif

/* Windows doesn't have these unlocked functions */
# define HAVE_DECL_CLEARERR_UNLOCKED 0
# define HAVE_DECL_FEOF_UNLOCKED 0
# define HAVE_DECL_FERROR_UNLOCKED 0
# define HAVE_DECL_FFLUSH_UNLOCKED 0
# define HAVE_DECL_FGETS_UNLOCKED 0
# define HAVE_DECL_FPUTC_UNLOCKED 0
# define HAVE_DECL_FPUTS_UNLOCKED 0
# define HAVE_DECL_FREAD_UNLOCKED 0
# define HAVE_DECL_FWRITE_UNLOCKED 0
# define HAVE_DECL_GETCHAR_UNLOCKED 0
# define HAVE_DECL_GETC_UNLOCKED 0
# define HAVE_DECL_PUTCHAR_UNLOCKED 0
# define HAVE_DECL_PUTC_UNLOCKED 0

/* Windows typically doesn't have langinfo */
# ifndef HAVE_LANGINFO_CODESET
#  define HAVE_LANGINFO_CODESET 0
# endif

/* Windows memory allocation doesn't follow POSIX errno behavior */
# define HAVE_MALLOC_POSIX 0
# define HAVE_FREE_POSIX 0

/* Standard library availability on Windows */
# define HAVE_MEMMOVE 1
# define HAVE_SETLOCALE 1

/* Wide character support */
# define HAVE_WCHAR_T 1
# define HAVE_WCHAR_H 1
# define HAVE_MBSTATE_T 1
# define HAVE_MBRTOWC 1
# define HAVE_WCRTOMB 1
# define HAVE_MBSINIT 1

/* Common type sizes on Windows */
# ifdef _WIN64
#  define BITSIZEOF_SIZE_T 64
#  define BITSIZEOF_PTRDIFF_T 64
# else
#  define BITSIZEOF_SIZE_T 32
#  define BITSIZEOF_PTRDIFF_T 32
# endif
# define BITSIZEOF_WCHAR_T 16
# define BITSIZEOF_WINT_T 16
# define BITSIZEOF_SIG_ATOMIC_T 32

#endif /* WINDOWS_NATIVE */

/* Cross-platform type handling for non-Windows systems */
#ifndef WINDOWS_NATIVE
/* On Unix-like systems, let the system headers define standard types */
/* These are typically defined by system headers */
#endif

/* Define to 1 if running on Windows */
#cmakedefine WINDOWS_NATIVE @WINDOWS_NATIVE@

/* Compiler attribute support detection */
#if (defined __has_attribute \
     && (!defined __clang_minor__ \
         || (defined __apple_build_version__ \
             ? 6000000 <= __apple_build_version__ \
             : 3 < __clang_major__ + (5 <= __clang_minor__))))
# define _GL_HAS_ATTRIBUTE(attr) __has_attribute (__##attr##__)
#else
# define _GL_HAS_ATTRIBUTE(attr) _GL_ATTR_##attr
# define _GL_ATTR_alloc_size _GL_GNUC_PREREQ (4, 3)
# define _GL_ATTR_always_inline _GL_GNUC_PREREQ (3, 2)
# define _GL_ATTR_artificial _GL_GNUC_PREREQ (4, 3)
# define _GL_ATTR_cold _GL_GNUC_PREREQ (4, 3)
# define _GL_ATTR_const _GL_GNUC_PREREQ (2, 95)
# define _GL_ATTR_deprecated _GL_GNUC_PREREQ (3, 1)
# define _GL_ATTR_diagnose_if 0
# define _GL_ATTR_error _GL_GNUC_PREREQ (4, 3)
# define _GL_ATTR_externally_visible _GL_GNUC_PREREQ (4, 1)
# define _GL_ATTR_fallthrough _GL_GNUC_PREREQ (7, 0)
# define _GL_ATTR_format _GL_GNUC_PREREQ (2, 7)
# define _GL_ATTR_leaf _GL_GNUC_PREREQ (4, 6)
# define _GL_ATTR_malloc _GL_GNUC_PREREQ (3, 0)
# ifdef _ICC
#  define _GL_ATTR_may_alias 0
# else
#  define _GL_ATTR_may_alias _GL_GNUC_PREREQ (3, 3)
# endif
# define _GL_ATTR_noinline _GL_GNUC_PREREQ (3, 1)
# define _GL_ATTR_nonnull _GL_GNUC_PREREQ (3, 3)
# define _GL_ATTR_nonstring _GL_GNUC_PREREQ (8, 0)
# define _GL_ATTR_nothrow _GL_GNUC_PREREQ (3, 3)
# define _GL_ATTR_packed _GL_GNUC_PREREQ (2, 7)
# define _GL_ATTR_pure _GL_GNUC_PREREQ (2, 96)
# define _GL_ATTR_returns_nonnull _GL_GNUC_PREREQ (4, 9)
# define _GL_ATTR_sentinel _GL_GNUC_PREREQ (4, 0)
# define _GL_ATTR_unused _GL_GNUC_PREREQ (2, 7)
# define _GL_ATTR_warn_unused_result _GL_GNUC_PREREQ (3, 4)
#endif

/* GNU C version check macro */
#if defined __GNUC__ && defined __GNUC_MINOR__
# define _GL_GNUC_PREREQ(major, minor) \
    ((major) < __GNUC__ + ((minor) <= __GNUC_MINOR__))
#else
# define _GL_GNUC_PREREQ(major, minor) 0
#endif

/* Apple GCC workaround for C99 extern inline semantics */
#if defined __APPLE__ && defined __MACH__ && __APPLE_CC__ >= 5465 && !defined __cplusplus && __STDC_VERSION__ >= 199901L && !defined __GNUC_STDC_INLINE__
# define __GNUC_STDC_INLINE__ 1
#endif

/* DLL import/export handling */
#ifdef WINDOWS_NATIVE
# if defined(_MSC_VER) && defined(_DLL)
#  define DLL_VARIABLE __declspec(dllimport)
# elif defined(__GNUC__) && defined(__declspec)
#  define DLL_VARIABLE __declspec(dllimport)
# else
#  define DLL_VARIABLE
# endif
#else
# define DLL_VARIABLE
#endif

/* Visibility attribute for shared libraries */
#if defined HAVE_VISIBILITY && HAVE_VISIBILITY
# define LIBICONV_VISIBILITY __attribute__((__visibility__("default")))
#elif defined WINDOWS_NATIVE && defined(BUILDING_LIBICONV) && defined(DLL_EXPORT)
# define LIBICONV_VISIBILITY __declspec(dllexport)
#elif defined WINDOWS_NATIVE && !defined(BUILDING_LIBICONV)
# define LIBICONV_VISIBILITY __declspec(dllimport)
#else
# define LIBICONV_VISIBILITY
#endif

/* Relocatable installation support */
#ifdef ENABLE_RELOCATABLE
# define INSTALLPREFIX NULL
#else
# define INSTALLPREFIX "@CMAKE_INSTALL_PREFIX@"
#endif

/* Final consistency checks and fallbacks */
#ifndef HAVE_STDINT_H
# ifdef WINDOWS_NATIVE
#  define HAVE_STDINT_H 1
# endif
#endif

#ifndef HAVE_STDIO_H
# define HAVE_STDIO_H 1
#endif

#ifndef HAVE_STDLIB_H
# define HAVE_STDLIB_H 1
#endif

#ifndef HAVE_STRING_H
# define HAVE_STRING_H 1
#endif

#ifndef STDC_HEADERS
# define STDC_HEADERS 1
#endif

#endif /* CONFIG_H */